# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i-QXn4NQTPk5xqyrKdnDKmJhZYepZin8
"""

import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms, models
from torch.utils.data import DataLoader, Subset
from sklearn.model_selection import train_test_split

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
])
svhn_train = datasets.SVHN(root='./data', split='train', transform=transform, download=True)

train_indices, test_indices = train_test_split(range(len(svhn_train)), test_size=0.75, random_state=42)
train_loader = DataLoader(Subset(svhn_train, train_indices), batch_size=64, shuffle=True)
test_loader = DataLoader(Subset(svhn_train, test_indices), batch_size=64, shuffle=False)

models_dict = {
    "ResNet18": models.resnet18(pretrained=True),
    "ResNet50": models.resnet50(pretrained=True),
    "ResNet101": models.resnet101(pretrained=True),
    'VGG-16': models.vgg16(pretrained=True)
}

for name, model in models_dict.items():
    if "ResNet" in name:
        num_ftrs = model.fc.in_features
        model.fc = nn.Linear(num_ftrs, 10)  # Change output to 10 classes for SVHN
    model.to(device)
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    criterion = nn.CrossEntropyLoss()

    # Training loop
    for epoch in range(10):  # Adjust as needed
        model.train()
        running_loss = 0.0
        for inputs, labels in train_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            running_loss += loss.item() * inputs.size(0)
        print(f"{name} - Epoch {epoch+1}, Loss: {running_loss / len(train_loader.dataset)}")

def evaluate_model(model, test_loader):
    model.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for inputs, labels in test_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
    accuracy = correct / total
    return accuracy

results = {}
for name, model in models_dict.items():
    accuracy = evaluate_model(model, test_loader)
    results[name] = accuracy

# Print results
for name, acc in results.items():
    print(f"{name}: Accuracy = {acc}")

