# -*- coding: utf-8 -*-
"""Q3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fCfNrk2OoloUMPoQBkgZ2yR5dBB3Xezy
"""

import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
from torchvision.datasets import MNIST
from torch.utils.data import DataLoader, random_split
import numpy as np

class DenseNN(nn.Module):
    def __init__(self, input_size, num_classes, num_hidden_layers=2, num_neurons_per_layer=128):
        super(DenseNN, self).__init__()
        self.input_size = input_size
        self.num_classes = num_classes
        self.num_hidden_layers = num_hidden_layers
        self.num_neurons_per_layer = num_neurons_per_layer

        # Define input layer
        self.input_layer = nn.Linear(input_size, num_neurons_per_layer)

        # Define hidden layers
        self.hidden_layers = nn.ModuleList()
        for _ in range(num_hidden_layers - 1):
            self.hidden_layers.append(nn.Linear(num_neurons_per_layer, num_neurons_per_layer))

        # Define output layer
        self.output_layer = nn.Linear(num_neurons_per_layer, num_classes)

    def forward(self, x):
        x = torch.flatten(x, 1)
        x = torch.relu(self.input_layer(x))
        for layer in self.hidden_layers:
            x = torch.relu(layer(x))
        x = self.output_layer(x)
        return x

transform = transforms.Compose([
  transforms.ToTensor(),
  transforms.Normalize((0.1307,), (0.3081,)),  # MNIST specific mean and std
  transforms.RandomHorizontalFlip(p=0.5),  # Random horizontal flip with probability 0.5
  transforms.RandomRotation(degrees=15)  # Random rotation by up to 15 degrees
])

train_dataset = MNIST(root='.', train=True, download=True, transform=transform)
test_dataset = MNIST(root='.', train=False, download=True, transform=transform)

train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

model = DenseNN(input_size=28*28, num_classes=10, num_hidden_layers=2, num_neurons_per_layer=128).to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

num_epochs = 10
for epoch in range(num_epochs):
    model.train()
    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

    model.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for images, labels in test_loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    accuracy = correct / total
    print(f'Epoch [{epoch+1}/{num_epochs}], Test Accuracy: {accuracy:.3f}')

learning_rates = [0.001, 0.0001]
batch_sizes = [64, 128]

for lr in learning_rates:
    for batch_size in batch_sizes:
        model = DenseNN(input_size=28*28, num_classes=10, num_hidden_layers=2, num_neurons_per_layer=128).to(device)
        optimizer = optim.Adam(model.parameters(), lr=lr)

        train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
        test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

        for epoch in range(num_epochs):
            model.train()
            for images, labels in train_loader:
                images, labels = images.to(device), labels.to(device)
                optimizer.zero_grad()
                outputs = model(images)
                loss = criterion(outputs, labels)
                loss.backward()
                optimizer.step()

        model.eval()
        correct = 0
        total = 0
        with torch.no_grad():
            for images, labels in test_loader:
                images, labels = images.to(device), labels.to(device)
                outputs = model(images)
                _, predicted = torch.max(outputs, 1)
                total += labels.size(0)
                correct += (predicted == labels).sum().item()

        accuracy = correct / total
        print(f'Learning Rate: {lr}, Batch Size: {batch_size}, Test Accuracy: {accuracy:.3f}')

